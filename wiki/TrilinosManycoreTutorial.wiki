#summary Trilinos Manycore Tutorial Page
=Trilinos Manycore Tutorial Page=

The Trilinos project is committed to efficient execution on all important computing platforms from laptops to leadership class systems.  Therefore, support for multicore and GPU compute nodes (which we collectively call "manycore" nodes) is essential.  Development of manycore capabilities requires a significant effort over a long span of time, especially since manycore architectures and programming models are still evolving rapidly.

On this page we discuss current capabilities and and future plans, and provide some examples to illustrate how current Trilinos manycore capabilities can be used.

----

== Current Capabilities (Trilinos 11.0, Oct 2012) ==

Trilinos' Tpetra package has supported manycore compute nodes for several years.  Nevertheless, algorithms and software for these nodes are still evolving.  Presently Trilinos provides a core foundation for writing and executing code on manycore-based computers.  Specifically we provide:

  * OpenMP support for Epetra.  Epetra is the original and still dominant collection of data classes for Trilinos.  Epetra can be compiled with OpenMP support enabled.  Turning this option on will enable threaded computation of sparse matrix multiplication, and all vector and multivector computations.  It includes support for NUMA data placement.  Sparse triangular solves are presently NOT threaded.
  * Pthreads, OpenMP, Intel Threading Building Blocks (TBB), and CUDA (via Thrust) support for Tpetra.  Tpetra is the replacement for Epetra that supports an extensible manycore node interface, as well as templated scalar and ordinal types.
  * Manycore-enabled iterative solvers for linear systems and eigenvalue problems.  The Trilinos packages Belos and Anasazi work with both Epetra and Tpetra provided data classes and can therefore exploit intranode parallelism on manycore nodes.  The preconditioner package Ifpack2 and direct sparse solver interface package Amesos2 work with Tpetra objects.  Their sparse factorizations may not necessarily exploit intranode parallelism, but the factors they create are Tpetra sparse matrices.
  * The newly released ShyLU manycore preconditioner package.  ShyLU includes sparse direct and incomplete factorization algorithms for tens to hundreds of cores.

== Near-term future compabilities == 

  * Muelu multilevel preconditioner package. Built on both Epetra and Tpetra, Muelu is the next generation of Trilinos/ML multilevel preconditioner capabilities.
 
== Longer-term future capabilities ==

  * Most of the existing capabilities in Trilinos have a focused research effort on algorithms and software design for manycore nodes.  Over the next five years we expect to complete the transition to a fully manycore enabled software stack.

== Composable with each other and with MPI ==

  * All Trilinos capabilities are composable with each other and with MPI.  For example, it is straightforward to use MPI across nodes of a distributed memory system and use OpenMP, TBB, Pthreads and CUDA on the node.
  * Furthermore, with Tpetra it is possible to create hybrid combinations of nodes.  In particular, we can compose MPI with threading on the node (Pthreads or TBB) and CUDA on the accelerator.  This is currently an advanced use case and we won't show an example in today's tutorial.

----

== [http://trilinos.sandia.gov/packages/webtrilinos WebTrilinos] Portal ==

[http://trilinos.sandia.gov/packages/webtrilinos WebTrilinos] is a scientific portal, a web-based environment to use several Trilinos packages through the web.  WebTrilinos supports most, but not all Trilinos packages.  It is installed at St. John's University, MN.  

For today's tutorial and demonstrations, we will use [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-shared-11.0/c++/index.html this portal].  It includes a version of Trilinos 11 that was built with Pthreads (TPI), OpenMP, and "serial" node types. Access to this site is password protected.  Login information will be given during live tutorials as needed.
 
== Now for some examples: ==

  # *Start with some tools using the [http://trilinos.sandia.gov/packages/teuchos Teuchos] package.*
    * *Basic Support Tools*
       * [TeuchosPL Build a parameter list (used to pass parameters to all Trilinos packages).]
       * [TeuchosRCP Build a reference-counted pointer (used to eliminate memory leak issues in most Trilinos packages).]
       * [TeuchosCLP Build a command-line parser (tool for changing runtime behavior of program, providing documentation for options).] [TeuchosCLP_unhighlighted [unhighlighted]]
       * [TeuchosTime Build a time monitor (tool for timing individual methods or operations in a program).]
  # *Examples using [http://trilinos.sandia.gov/packages/kokkos Kokkos] and  [http://trilinos.sandia.gov/packages/tpetra Tpetra] packages.*
    * *Basic node manipulation and use*
       * [PrintAvailableKokkosNodeTypes Detect which node types were enabled and which is the default.]
       * [TpetraVectorWithNodeSelect Simple Tpetra Vector example where Kokkos node type is explicitly selected.]
       * [TpetraPowerMethodWithNodeSelect The Power Method using Tpetra and explicitly selected Kokkos node type.]
       * [Ifpack2CreatePreconditioner Create a preconditioner using Ifpack2 and Tpetra.]

---- 

== Learning more: ==

  * [http://trilinos.sandia.gov Online reference documentation].
  * [http://trilinos.sandia.gov/events/trilinos_user_group_2011/index.html Trilinos User Group Meeting (2011).]
  * [http://trilinos.sandia.gov/events/trilinos_user_group_2010/index.html Trilinos User Group Meeting (2010).]
  * [http://trilinos.sandia.gov/events/trilinos_user_group_2009/index.html Trilinos User Group Meeting (2009).]
  * [http://trilinos.sandia.gov/events/trilinos_user_group_2008/index.html Trilinos User Group Meeting (2008).]
  * [http://trilinos.sandia.gov/events/trilinos_user_group_2007/index.html Trilinos User Group Meeting (2007).]
  * [http://trilinos.sandia.gov/mail_lists.html Mail lists.]