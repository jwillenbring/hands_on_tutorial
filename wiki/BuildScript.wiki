#summary Example "do-configure" CMake driver script for building Trilinos

= Introduction =

Trilinos uses the CMake build system.  If you are familiar with the
GNU Autotools, running CMake is a little bit like running the
"configure" script.  After that come the familiar "make" and "make
install" steps.  It's typical to invoke CMake indirectly by writing a
`do-configure` script, which is a short executable shell script that
invokes CMake with the desired build options.  The shell script below
is an example of a `do-configure` script.  You may make it executable
in your shell environment, and then invoke it like this:

{{{
$ ./do-configure
}}}

You may name this script however you like.  It just invokes CMake to
configure Trilinos' build options.

Trilinos' build directory _must_ be separate from its source
directory.  Thus, once you have Trilinos' source directory at some
path `$TRILINOS_PATH`, create a separate build directory and run your
`do-configure` script in the build directory.

= Sample "do-configure" script =

{{{
#!/bin/sh

# Set this to the root of your Trilinos source directory.
TRILINOS_PATH=../Trilinos

#
# You can invoke this shell script with additional command-line
# arguments.  They will be passed directly to CMake.
#
EXTRA_ARGS=$@

#
# Each invocation of CMake caches the values of build options in a
# CMakeCache.txt file.  If you run CMake again without deleting the
# CMakeCache.txt file, CMake won't notice any build options that have
# changed, because it found their original values in the cache file.
# Deleting the CMakeCache.txt file before invoking CMake will insure
# that CMake learns about any build options you may have changed.
# Experience will teach you when you may omit this step.
#
rm -f CMakeCache.txt

cmake \
-D CMAKE_INSTALL_PREFIX:PATH=$HOME/pkg/Trilinos/Serial \
-D CMAKE_BUILD_TYPE:STRING=RELEASE \
-D CMAKE_CXX_COMPILER:FILEPATH=g++ \
-D CMAKE_C_COMPILER:FILEPATH=gcc \
-D CMAKE_Fortran_COMPILER:FILEPATH=gfortran \
-D HAVE_GCC_ABI_DEMANGLE:BOOL=ON \
-D Trilinos_ENABLE_ALL_PACKAGES:BOOL=FALSE \
-D Trilinos_ENABLE_Epetra:BOOL=ON \
-D Trilinos_ENABLE_TESTS:BOOL=ON \
-D Trilinos_ENABLE_EXAMPLES:BOOL=ON \
$EXTRA_ARGS \
../

}}}

= A sampling of Trilinos configuration options =

  * `CMAKE_INSTALL_PREFIX`: Path to install Trilinos (for `make install`)
  * `CMAKE_BUILD_TYPE`: DEBUG or RELEASE.
  * `CMAKE_CXX_COMPILER`: The C++ compiler to use when building Trilinos.  Most Trilinos packages are implemented in C++.
  * `CMAKE_C_COMPILER`: The C compiler to use when building Trilinos.  Some parts of Trilinos are implemented in C.
  * `CMAKE_Fortran_COMPILER`: The Fortran compiler to use when building Trilinos.  Some parts of Trilinos are implemented in Fortran.  Fortran is _not_ required to build Trilinos.
  * `HAVE_GCC_ABI_DEMANGLE`: Setting this option to ON improves debugging messages, if you are using the GNU Compiler Collection's compilers.
  * `CMAKE_VERBOSE_MAKEFILE`: Set to ON (or TRUE) if you prefer a "noisy" build.
  * `Trilinos_ENABLE_ALL_PACKAGES`: If you like, you can build _all_ of Trilinos, but you don't have to.
  * `Trilinos_ENABLE_$PACKAGE`: If ON (or TRUE), build `$PACKAGE`.  For example, `Trilinos_ENABLE_Epetra` enables the Epetra package.
  * `Trilinos_ENABLE_TESTS`: If ON, build the tests for all packages that are to be built.
  * `Trilinos_ENABLE_EXAMPLES`: If ON, build the examples for all packages that are to be built.

