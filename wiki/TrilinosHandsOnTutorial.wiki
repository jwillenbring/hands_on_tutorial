#summary Trilinos Hands-on Tutorial Page
#labels Featured,Phase-Deploy
#sidebar TrilinosTutorialContents
= Trilinos Hands-on Tutorial =

== Reference and tutorial material ==

  * [http://trilinos.sandia.gov Trilinos website] (click on logo above)
  * Each Trilinos package has [http://trilinos.sandia.gov/packages/  Doxygen documentation].
  * [http://trilinos.sandia.gov/getting_started.html Trilinos "Getting Started"] page.
  * See links below to slides and video recordings of tutorials from previous Trilinos User Group meetings.

== Four options for running examples ==

=== Student shell accounts ===

  * Tutorial material lives on [https://github.com/jwillenbring/Trilinos_tutorial Github]
  * Steps to get started
    # Log in to student account on paratools07.rrt.net
    # `git clone https://github.com/jwillenbring/Trilinos_tutorial.git`
    # `cd Trilinos_tutorial`
    # `source ./setup.sh`  (loads MPI and Trilinos modules)
    # `cd cmake_build`
    # `./live-cmake`  (builds all the examples)
    # Change into build subdirectories to run examples by hand
  * We may do all but the last one or two steps for you; stay tuned!

===  Trilinos virtual machine (VM) ===

  * VM with same build environment as the student shell accounts
  * We won't cover this today, but you can download it and try it at home

=== *!WebTrilinos*: Web interface to edit, build, and run C++ code ===

  * [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI/c++/index.html Click here] to access WebTrilinos (Trilinos version 11.9).
  * Access to this site is password protected.  Login information will be given during live tutorials as needed.
  * This page gives you a text box in which you can paste, type, or edit C++ code.
    * That code will compile and link against a recent release of Trilinos, and run.
    * The web page will show you the resulting output.
    * Use Ctrl+A to highlight all the example code, Ctrl+C to copy it, and Ctrl+V to paste it in the !WebTrilinos window.
    * You can't read or write files, but you can embed input data in your program as a string.
  * !WebTrilinos is installed on a server at St. John's University, MN.

=== Build Trilinos yourself on your computer ===

  # Prerequisites
    * C++ and C compiler
    * [http://www.cmake.org/cmake/resources/software.html CMake] version >= 2.8
    * BLAS and LAPACK libraries
    * MPI (Message Passing Interface) (optional)
  # Download [http://trilinos.sandia.gov/download Trilinos]
  # Find a configuration script suitable for your system.
      * An example script is [BuildScript here].  You may need to modify the script.
      * You can find other scripts in the Trilinos distribution's `sample_scripts` directory.  
      * You can also use the CMake graphical user interface, or the console-based interface `ccmake`.
  # Use the script to run CMake.
  # Run `make` and `make install`.  You may specify the `-j <N>` flag for a parallel build.
  # Build your program against Trilinos.  You have two options: use CMake, or use a Makefile.
    * CMake: See CMakeFindPackageTrilinosExample
    * Makefile
      # Get an example Makefile from [http://trilinos.sandia.gov/Export_Makefile_example.txt here].
        * Learn about the Makefile and the Makefile.export system [http://trilinos.sandia.gov/Export_Makefile.txt here].
        * You can find the Makefile.export.package_name files once you have built and installed Trilinos.  
        * They will be in the include directory of your installation directory.  
        * Example: `TrilinosInstall/include/Makefile.export.Epetra`.
      # Customize the Makefile to your situation.  
        * The example Makefile uses only the Epetra package, but `Makefile.export.$PACKAGE_NAME` files are available for all packages.
        * You may also include `Makefile.export.Trilinos` to get all Trilinos packages.
      # Add your code into a file called main.cpp and build away!

== Examples illustrating the Tpetra-based solver stack ==

  # *Learn how to create and use [http://trilinos.sandia.gov/packages/tpetra Tpetra] dense and sparse linear algebra objects.*
     * [http://trilinos.sandia.gov/packages/docs/dev/packages/tpetra/doc/html/Tpetra_Lesson01.html Lesson 1]: "Hello world!"  Learn different ways to initialize MPI (or not) and pass an MPI communicator to Tpetra.
     * [http://trilinos.sandia.gov/packages/docs/dev/packages/tpetra/doc/html/Tpetra_Lesson02.html Lesson 2]: Learn how to make a Tpetra vector, given a communicator from Lesson 1.
     * [http://trilinos.sandia.gov/packages/docs/dev/packages/tpetra/doc/html/Tpetra_Lesson03.html Lesson 3]: Learn how to implement a simple numerical algorithm (the power method) using Tpetra sparse matrices and vectors.
     * [http://trilinos.sandia.gov/packages/docs/dev/packages/tpetra/doc/html/Tpetra_Lesson04.html Lesson 4]: Learn different ways to construct a Tpetra sparse matrix.
     * [http://trilinos.sandia.gov/packages/docs/dev/packages/tpetra/doc/html/Tpetra_Lesson05.html Lesson 5]: Learn how to migrate data in a Tpetra object between two different parallel data distributions.**
     * [Tpetra_Exercises_Advanced_CrsMatrix_ExplicitTranspose Advanced exercise]: Learn how to compute the explicit transpose of a sparse matrix.
  # *Learn how to solve linear systems using the [http://trilinos.sandia.gov/packages/belos Belos] package of iterative linear solvers, and the [http://trilinos.sandia.gov/packages/ifpack2 Ifpack2] package of preconditioners*
     * [Ifpack2CreatePreconditioner Create an Ifpack2 preconditioner]
     * [Tpetra_Belos_CreateSolver Solve a linear system using Belos and Ifpack2]

== Examples illustrating the Epetra-based solver stack ==

  # *Learn how to create and use Epetra dense and sparse linear algebra objects*
     * [EpetraLesson01 Lesson 1]: "Hello world!"  Learn different ways to initialize MPI (or not) and pass an MPI communicator to Epetra.
     * [EpetraLesson02 Lesson 2]: Learn how to make an Epetra vector, given a communicator from Lesson 1.
     * [EpetraLesson03 Lesson 3]: Learn how to implement a simple numerical algorithm (the power method) using Epetra sparse matrices and vectors.
     * [EpetraLesson04 Lesson 4]: Learn different ways to construct an Epetra sparse matrix.
     * [EpetraLesson05 Lesson 5]: Learn how to migrate data in an Epetra object between two different parallel data distributions.
  # *Generate test linear systems using the [http://trilinos.sandia.gov/packages/galeri Galeri] package.*
    * [GaleriLinearSystem Generate a matrix, discretized 2D Laplacian on a Cartesian grid.]
    * Try generating matrices for some different operators.  The list of supported operators is [http://trilinos.sandia.gov/packages/docs/dev/packages/galeri/doc/html/gl_GalleryCrsMatrix.html here].**
  # *Create an algebraic preconditioner using the [http://trilinos.sandia.gov/packages/ifpack  Ifpack] package.*
    * [IfpackFactory Create a preconditioner using the Ifpack preconditioner factory.]
    * Try generating different preconditioners:
      * The preconditioners supported in the factory interface are: "IC", "ICT", "ILU", "ILUT", and "Amesos".
      * The list of supported parameters for the factory is [http://trilinos.sandia.gov/packages/docs/dev/packages/ifpack/doc/html/index.html#ifp_params here].**
  # *Solve a linear system using the [http://trilinos.sandia.gov/packages/ifpack Ifpack] and [http://trilinos.sandia.gov/packages/aztecoo AztecOO] packages.*
    * [IfpackAztecOO Solve a linear system _Ax=b_ using Ifpack and AztecOO]**
  # *Solve a linear system using the [http://trilinos.sandia.gov/packages/ml ML] and [http://trilinos.sandia.gov/packages/aztecoo AztecOO] packages.*
    * [MLAztecOO Solve a linear system _Ax=b_ using ML(black-box) and AztecOO]**
    * [MLAztecOO2 Solve a linear system _Ax=b_ using ML and AztecOO, but setting some multigrid options]
  # *Solve a linear system using the [http://trilinos.sandia.gov/packages/ifpack Ifpack] and [http://trilinos.sandia.gov/packages/belos Belos] packages.*
    * [IfpackBelos2 Solve a linear system _Ax=b_ using Ifpack and Belos]**
  # *Compute some eigenpairs using the [http://trilinos.sandia.gov/packages/anasazi Anasazi] package.*
    * [AnasaziBlockDavidson Compute the smallest eigenpairs of a discretized 2D Laplacian using the block Davidson solver.]
    * [AnasaziLOBPCG Compute the smallest eigenpairs of a discretized 2D Laplacian using the LOBPCG solver.]
    * [AnasaziBlockKrylovSchurSVD Compute the dominant singular values of a 2D discretization of a simple kernel using the block Krylov-Schur solver.]**
  # *Solve a nonlinear system using the [http://trilinos.sandia.gov/packages/nox NOX] package.*
    * [NOXNewton Solve a simple nonlinear system using NOX]
    * [NOXNewton2 Solve a simple nonlinear system using NOX]

== Examples illustrating other packages ==

  # *[http://trilinos.sandia.gov/packages/pytrilinos PyTrilinos] tutorial materials.*
    * [http://trilinos.sandia.gov/packages/pytrilinos/PyTrilinosTutorial.pdf  PyTrilinos tutorial slides]
    * [PyTrilinosExample Solve a simple 2D Laplace problem using PyTrilinos]
  # *Learn how to use utilities in the [http://trilinos.sandia.gov/packages/teuchos Teuchos] package.*
    * *Basic Support Tools*
       * [TeuchosPL Build a parameter list (used to pass parameters to all Trilinos packages).]
       * [TeuchosRCP Build a reference-counted pointer (used to eliminate memory leak issues in most Trilinos packages).]
       * [TeuchosCLP Build a command-line parser (tool for changing runtime behavior of program, providing documentation for options).] [TeuchosCLP_unhighlighted [unhighlighted]]
       * [TeuchosTime Build a time monitor (tool for timing individual methods or operations in a program).]
   * *Template Support Tools*
       * [TeuchosBLAS Create a templated BLAS wrapper.]
       * [TeuchosLAPACK Create a templated LAPACK wrapper.]
       * [TeuchosSDM Create a templated serial, dense matrix.]**

== Other examples ==

Some examples don't work with the web tutorial, since they read from files.  You can try them out by downloading Trilinos and looking in the examples in the source tree.  For example, the [http://trilinos.sandia.gov/packages/intrepid Intrepid] discretizations package has examples in the `packages/trilinoscouplings/examples/scaling/` directory.  The following might be of interest:
    * example_CurlLSFEM.cpp: driver for solving div-curl first order system in 3D with tangential boundary condition using curl-conforming elements
    * example_DivLSFEM.cpp: driver for the same system with normal boundary condition and div-conforming elements
    * example_Poisson.cpp: solving the Poisson equation using a Galerkin finite element method

For [http://trilinos.sandia.gov/packages/belos Belos'] Recycling GMRES (GCRODR) solver, there are examples in `packages/belos/epetra/example/GCRODR/PrecGCRODREpetraExFile.cpp` and `GCRODREpetraExFile.cpp`.  These examples use the sherman5.hb matrix, which is included in the `/packages/belos/epetra/example/GCRODR` directory with the Trilinos distribution.

== Learning more: ==

  * Web sites of Trilinos User Group meetings
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2013/index.html 2013]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2012/index.html 2012]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2011/index.html 2011]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2010/index.html 2010]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2009/index.html 2009]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2008/index.html 2008]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2007/index.html 2007]
  * [http://trilinos.sandia.gov/mail_lists.html Mail lists.]