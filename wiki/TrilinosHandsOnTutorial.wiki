#summary Trilinos Hands-on Tutorial Page
#labels Featured,Phase-Deploy
#sidebar TrilinosTutorialContents
= Trilinos Hands-on Tutorial =

== Reference and tutorial material: ==

  * The Trilinos Project relies heavily upon its [http://trilinos.sandia.gov website] (click on logo above).
  * For future reference, a lot of information can be found on the [http://trilinos.sandia.gov/getting_started.html Trilinos "Getting Started"] page.
  * Trilinos has a Tutorial document that you can find [http://trilinos.sandia.gov/Trilinos10.6Tutorial.pdf here].
  * The 2010 Trilinos User Group meeting included a video-recorded tutorial that uses the website.  Part 1 is [http://mediasiteson.sandia.gov/mediasite/Viewer/?peid=2c084ceb7cc24a0ba3b2c4b6f41069241d here].  Part 2 is [http://mediasiteson.sandia.gov/mediasite/Viewer/?peid=6a5bbebe7a9645c3a4a47f7f45d35d831d here].
  * Much of the rest of 2010 TUG is also available by video [http://trilinos.sandia.gov/events/trilinos_user_group_2010/ here].
  * *A more focused manycore tutorial starts [TrilinosManycoreTutorial here].*

== Two options for running examples: ==

  * *!WebTrilinos*
    * This is a web page interface to Trilinos.  It gives you a text box in which you can paste, type, or edit code.  That code will compile against a recent release of Trilinos.
    * [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-shared-11.0/c++/index.html Click here] to access Web Trilinos (Version 11.0, MPI/OpenMP-enabled).
    * !WebTrilinos is installed at St. John's University, MN.
    * Here is a list of all available Trilinos versions:
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-shared-11.0/c++/index.html Trilinos 11.0, MPI/OpenMP-enabled]
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-OpenMP-RTI-shared-11.0/c++/index.html Trilinos 11.0, MPI/OpenMP/RTI-enabled]
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-shared-10.8/c++/index.html Trilinos 10.8, MPI-enabled]
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosSERIAL-TBB-10.8.3/c++/index.html Trilinos 10.8, TBB-enabled]
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosSERIAL-CUDA-10.8.3/c++/index.html Trilinos 10.8, CUDA-enabled]
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI/c++/index.html Trilinos development branch (10.7), MPI-enabled]
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-shared-10.6/c++/index.html Trilinos 10.6, MPI-enabled]
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosSERIAL-10.4/c++/index.html Trilinos 10.4, serial]
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-shared-10.4/c++/index.html Trilinos 10.4, MPI-enabled]
<wiki:comment>
           * [https://www.users.csbsju.edu/trilinos/WebTrilinosSERIAL-CUDA-10.6.1/c++/index.html Trilinos 10.7 (dev), CUDA-enabled]
</wiki:comment>
    * In addition to the C++ interfaces, a [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-shared-10.4/MatrixPortal/index.html Matrix Portal interface] and a [https://www.users.csbsju.edu/trilinos/WebTrilinosMPI-shared-10.4/python/index.html Python interface] are also available.
    * Access to this site is password protected.  Login information will be given during live tutorials as needed.
    * *Reminder:* Use Ctrl+A to highlight all the example code, Ctrl+C to copy it, and Ctrl+V to paste it in the !WebTrilinos window.
  * *Download and build the examples on your machine*
    # Download [http://trilinos.sandia.gov/download Trilinos]
    # Download and install CMake (if not already done).  
          * The latest CMake release can be downloaded from [http://www.cmake.org/cmake/resources/software.html here].
    # Download and install Clapack (if you don't have LAPACK and BLAS already).  
          * Get Clapack from [http://www.netlib.org/clapack/clapack-3.2.1-CMAKE.tgz here].  
          * Use CMake to build Clapack.
    # Build and install Trilinos. 
          * An example script is [BuildScript here].  
          * You can find other scripts in the Trilinos distribution Trilinos/sample_scripts directory.  
          * You can also use the CMake gui, or the text-gui ccmake.
    # Get Makefile from [http://trilinos.sandia.gov/Export_Makefile_example.txt here].
          * Learn about the Makefile and the Makefile.export system [http://trilinos.sandia.gov/Export_Makefile.txt here].
          * You can find the Makefile.export.package_name files once you have built and installed Trilinos.  
          * They will be in the include directory of your installation directory.  
          * Example: {{{TrilinosInstall/include/Makefile.export.Epetra.}}}
    # Customize the Makefile to your situation (the example Makefile uses only the Epetra package, but Makefile.export.package_name files are available for all packages).
    # Add Example code into a file called main.cpp and build away!

== Examples illustrating the Tpetra-based solver stack ==

  # *Learn how to create and use [http://trilinos.sandia.gov/packages/tpetra Tpetra] dense and sparse linear algebra objects.*
     * [Tpetra_Lesson01_HelloWorld Lesson 1]: "Hello world!"  Learn different ways to initialize MPI (or not) and pass an MPI communicator to Tpetra.
     * [Tpetra_Lesson02_Vector Lesson 2]: Learn how to make a Tpetra vector, given a communicator from Lesson 1.
     * [Tpetra_Lesson03_PowerMethod Lesson 3]: Learn how to implement a simple numerical algorithm (the power method) using Tpetra sparse matrices and vectors.
     * [Tpetra_Lesson04_SparseMatrixFill Lesson 4]: Learn different ways to construct a Tpetra sparse matrix.
     * [Tpetra_Lesson05_Redistribution Lesson 5]: Learn how to migrate data in a Tpetra object between two different parallel data distributions.**
     * [Tpetra_Exercises_Advanced_CrsMatrix_ExplicitTranspose Advanced exercise]: Learn how to compute the explicit transpose of a sparse matrix.
  # *Learn how to solve linear systems using the [http://trilinos.sandia.gov/packages/belos Belos] package of iterative linear solvers, and the [http://trilinos.sandia.gov/packages/ifpack2 Ifpack2] package of preconditioners*
     * [Ifpack2CreatePreconditioner Create an Ifpack2 preconditioner]
     * [SimpleTpetraBelos Solve a linear system using Belos and Ifpack2]

== Examples illustrating the Epetra-based solver stack ==

  # *Learn how to use [http://trilinos.sandia.gov/packages/epetra Epetra] dense and sparse linear algebra objects.*
    * [EpetraSimpleVector Beginner: Construct some vectors and perform basic operations.]
    * [EpetraPowerMethod Intermediate: Find the dominant eigenpair of a matrix using the power method.]**
  # *Generate test linear systems using the [http://trilinos.sandia.gov/packages/galeri Galeri] package.*
    * [GaleriLinearSystem Generate a matrix, discretized 2D Laplacian on a Cartesian grid.]
    * Try generating matrices for some different operators, the list of supported operators is [http://trilinos.sandia.gov/packages/docs/dev/packages/galeri/doc/html/gl_GalleryCrsMatrix.html here].**
  # *Create an algebraic preconditioner using the [http://trilinos.sandia.gov/packages/ifpack  Ifpack] package.*
    * [IfpackFactory Create a preconditioner using the Ifpack preconditioner factory.]
    * Try generating different preconditioners:
      * The preconditioners supported in the factory interface are: "IC", "ICT", "ILU", "ILUT", and "Amesos".
      * The list of supported parameters for the factory is [http://trilinos.sandia.gov/packages/docs/dev/packages/ifpack/doc/html/index.html#ifp_params here].**
  # *Solve a linear system using the [http://trilinos.sandia.gov/packages/ifpack Ifpack] and [http://trilinos.sandia.gov/packages/aztecoo AztecOO] packages.*
    * [IfpackAztecOO Solve a linear system _Ax=b_ using Ifpack and AztecOO]**
  # *Solve a linear system using the [http://trilinos.sandia.gov/packages/ml ML] and [http://trilinos.sandia.gov/packages/aztecoo AztecOO] packages.*
    * [MLAztecOO Solve a linear system _Ax=b_ using ML(black-box) and AztecOO]**
    * [MLAztecOO2 Solve a linear system _Ax=b_ using ML and AztecOO, but setting some multigrid options]
  # *Solve a linear system using the [http://trilinos.sandia.gov/packages/ifpack Ifpack] and [http://trilinos.sandia.gov/packages/belos Belos] packages.*
    * [IfpackBelos2 Solve a linear system _Ax=b_ using Ifpack and Belos]**
  # *Compute some eigenpairs using the [http://trilinos.sandia.gov/packages/anasazi Anasazi] package.*
    * [AnasaziBlockDavidson Compute the smallest eigenpairs of a discretized 2D Laplacian using the block Davidson solver.]
    * [AnasaziLOBPCG Compute the smallest eigenpairs of a discretized 2D Laplacian using the LOBPCG solver.]
    * [AnasaziBlockKrylovSchurSVD Compute the dominant singular values of a 2D discretization of a simple kernel using the block Krylov-Schur solver.]**
  # *Solve a nonlinear system using the [http://trilinos.sandia.gov/packages/nox NOX] package.*
    * [NOXNewton Solve a simple nonlinear system using NOX]
    * [NOXNewton2 Solve a simple nonlinear system using NOX]

== Examples illustrating other packages ==

  # *[http://trilinos.sandia.gov/packages/pytrilinos PyTrilinos] tutorial materials.*
    * [http://trilinos.sandia.gov/packages/pytrilinos/PyTrilinosTutorial.pdf  PyTrilinos tutorial slides]
    * [PyTrilinosExample Solve a simple 2D Laplace problem using PyTrilinos]
  # *Learn how to use utilities in the [http://trilinos.sandia.gov/packages/teuchos Teuchos] package.*
    * *Basic Support Tools*
       * [TeuchosPL Build a parameter list (used to pass parameters to all Trilinos packages).]
       * [TeuchosRCP Build a reference-counted pointer (used to eliminate memory leak issues in most Trilinos packages).]
       * [TeuchosCLP Build a command-line parser (tool for changing runtime behavior of program, providing documentation for options).] [TeuchosCLP_unhighlighted [unhighlighted]]
       * [TeuchosTime Build a time monitor (tool for timing individual methods or operations in a program).]
   * *Template Support Tools*
       * [TeuchosBLAS Create a templated BLAS wrapper.]
       * [TeuchosLAPACK Create a templated LAPACK wrapper.]
       * [TeuchosSDM Create a templated serial, dense matrix.]**

== Other examples ==

Some examples don't work with the web tutorial, since they read from files.  You can try them out by downloading Trilinos and looking in the examples in the source tree.  For example, the [http://trilinos.sandia.gov/packages/intrepid Intrepid] discretizations package has examples in the `packages/trilinoscouplings/examples/scaling/` directory.  The following might be of interest:
    * example_CurlLSFEM.cpp: driver for solving div-curl first order system in 3D with tangential boundary condition using curl-conforming elements
    * example_DivLSFEM.cpp: driver for the same system with normal boundary condition and div-conforming elements
    * example_Poisson.cpp: solving the Poisson equation using a Galerkin finite element method

For [http://trilinos.sandia.gov/packages/belos Belos'] Recycling GMRES (GCRODR) solver, there are examples in `packages/belos/epetra/example/GCRODR/PrecGCRODREpetraExFile.cpp` and `GCRODREpetraExFile.cpp`.  These examples use the sherman5.hb matrix, which is included in the `/packages/belos/epetra/example/GCRODR` directory with the Trilinos distribution.

== Learning more: ==

  * Web sites of Trilinos User Group meetings
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2013/index.html 2013]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2013/index.html 2012]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2011/index.html 2011]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2010/index.html 2010]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2009/index.html 2009]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2008/index.html 2008]
    * [http://trilinos.sandia.gov/events/trilinos_user_group_2007/index.html 2007]
  * [http://trilinos.sandia.gov/mail_lists.html Mail lists.]